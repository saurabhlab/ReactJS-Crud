   constructor(props) {
        super(props);


            this.cascading= this.cascading.bind(this);
            this.state={opt:[],count:["India","USA"]};

        //this.state = { val: [], form: '' };
       // this.onchange = this.onchange.bind(this);
    }





cascading(event) {
        const options=[];
        const country = [{ 'India': ["Uttarakhand", "UttarPradesh","Maharastra"] }, { 'USA': ["Newyork", "Ohio"] }];
        country.map((item)=>{   
            Object.keys(item).map(key => {
                   if (event.target.value === key){
                       let i=item[key].length-1;
                        for(var s=0;s<=i;s++){
                        options.push(<option key={item[key][s]} value={item[key][s]}>{item[key][s]}</option>);
                       
                        }
                    }
            
            });
        });
       this.setState({opt:options}); 
        
    }








--
--
--






                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">State</label>
                        <div className="col-md-4 col-sm-4">



                            <Field name="State" component="select" type="select" className="form-control" onChange={this.cascading} >
                                <option value="">--Select State--</option>
                                {this.state.count.map((val, key) => {
                                    return <option key={key} value={val}>{val}</option>
                                })}
                            </Field>
                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">City</label>
                        <div className="col-md-4 col-sm-4">



                            <Field name="City" component="select" type="select" className="form-control">
                                <option value="">--Please Select--</option>
                                {this.state.opt}
                            </Field>
                        </div>
                    </div>




//---------
FULL CREATE PAGE CODE HERE


import React, { Component } from 'react';
import { Field, reduxForm } from 'redux-form';
import { createPost } from '../actions/index';
import { NavLink } from 'react-router-dom';
import { connect } from 'react-redux';
//import Notifications, {notify} from 'react-notify-toast';
import GetMethod from '../actions/index';
import validate from '../validation/validate';



//validation code 
const renderField = ({input, type, meta: {touched, error, warning}}) => {
    return <div>
        <input {...input} type={type} className="form-control input-md" />
        {touched && ((error && <span className="error">{error}</span>) || (warning && <span>{warning}</span>))}
    </div>

}










class CreateNew extends Component {

    constructor(props) {
        super(props);


        this.cascading = this.cascading.bind(this);
        this.state = { opt: [], count: ["India", "USA"] };

        //this.state = { val: [], form: '' };
        // this.onchange = this.onchange.bind(this);
    }








    cascading(event) {
        const options = [];
        const country = [{ 'India': ["Uttarakhand", "UttarPradesh", "Maharastra"] }, { 'USA': ["Newyork", "Ohio"] }];
        country.map((item) => {
            Object.keys(item).map(key => {
                if (event.target.value === key) {
                    let i = item[key].length - 1;
                    for (var s = 0; s <= i; s++) {
                        options.push(<option key={item[key][s]} value={item[key][s]}>{item[key][s]}</option>);

                    }
                }

            });
        });
        this.setState({ opt: options });

    }


    onSubmit(props) {
        //  this.setState({ form: props });

        this.props.createPost(props).then((request) => { this.props.GetMethod(); })
        this.props.history.push(`/GetCustomer`);
        // let myColor = { background: 'green', text: "white" };
        //notify.show("Recored saved !", "custom", 5000, myColor);

    }








    static propTypes = {
        history: React.PropTypes.object
    }




    render() {


        const {handleSubmit, pristine, reset, submitting} = this.props;
        return (
            <div>
                <div>
                    <NavLink to="/Home" className='btn btn-danger pull-right'>Back to Home</NavLink>


                </div>


                <form className="form-horizontal animation2 jumbotron" onSubmit={handleSubmit((v) => this.onSubmit(v))}>
                    <center><h2>Add Details</h2></center>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Name</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component={renderField} name="Name"
                                type="text" className="form-control input-md" />
                        </div>
                    </div>


                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Age</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component={renderField} name="Age"
                                type="text" placeholder="" className="form-control input-md" />



                        </div>
                    </div>





                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">State</label>
                        <div className="col-md-4 col-sm-4">



                            <Field name="State" component="select" type="select" className="form-control" onChange={this.cascading} >
                                <option value="">--Select State--</option>
                                {this.state.count.map((val, key) => {
                                    return <option key={key} value={val}>{val}</option>
                                })}
                            </Field>
                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">City</label>
                        <div className="col-md-4 col-sm-4">



                            <Field name="City" component="select" type="select" className="form-control">
                                <option value="">--Please Select--</option>
                                {this.state.opt}
                            </Field>
                        </div>
                    </div>




                    {/*  <Notifications />*/}




                    <button type="submit" className='btn btn-primary'>Submit</button> &nbsp;


            <button type="button" className='btn btn-success' disabled={pristine || submitting} onClick={reset}>Clear Values
        </button>
                </form>

            </div>
        );
    }
}



const CreateMyForm = reduxForm({ form: "Postformnew", validate }, null, { createPost })(CreateNew);

export default connect(null, { createPost, GetMethod })(CreateMyForm);



































// import React, { Component } from 'react';
// import { Field, reduxForm } from 'redux-form';
// import { createPost } from '../actions/index';
// import { NavLink } from 'react-router-dom';
// import { connect } from 'react-redux';
// //import Notifications, {notify} from 'react-notify-toast';
// import GetMethod from '../actions/index';
// import validate from '../validation/validate';


// import DropdownList from 'react-widgets/lib/DropdownList';
// import 'react-widgets/dist/css/react-widgets.css';



// //validation code 
// const renderField = ({input, type, meta: {touched, error, warning}}) => {
//     return <div>
//         <input {...input} type={type} className="form-control input-md" />
//         {touched && ((error && <span className="error">{error}</span>) || (warning && <span>{warning}</span>))}
//     </div>

// }



// const renderDropdownList = ({input, data,type, valueField, textField }) =>
//   {
//       return <div><DropdownList 
//       {...input}
//     data={data}
//     type={type}
//     valueField={valueField}
//     textField={textField}
//     onChange={input.onChange} />
// </div>  
// }





// const States = [ { State: 'Maharashtra', value: 'Maharashtra' },
//   { State: 'Bihar', value: 'Bihar' },
//   { State: 'UP', value: 'UP' } ]


// const Cities=[
//     {Type:'Maharashtra',value:'Nagpur'},
//         {Type:'Maharashtra',value:'Pune'},
//             {Type:'Maharashtra',value:'Mumbai'},


//     {Type:'Bihar',value:'Nalnda'},
//         {Type:'Bihar',value:'Patna'},
//             {Type:'Bihar',value:'New patna'},


//         {Type:'UP',value:'Lucknow'},
//             {Type:'UP',value:'Kanpur'},
//                 {Type:'UP',value:'Agra'}


// ]








// class CreateNew extends Component {

//     constructor(props) {
//         super(props);
//         this.state = { val: [], form: '' };
//         this.onchange = this.onchange.bind(this);
//     }


//     onchange(event) {
//         var arr = [];
//         Cities.map((item)=>{ if (item.Type === event.State) {
//                 arr.push(item);
//             }
//         });


//         this.setState({ val: arr });
//     }


// //  sub(val) {
// //         this.props.createPost(val);
// //         this.setState({ form: val });
// //         //console.log(this.state.form);
// //     }



//     onSubmit(props) { 
//     //  this.setState({ form: props });

//       this.props.createPost(props).then((request)=>{ this.props.GetMethod(); })
//       this.props.history.push(`/GetCustomer`);
//     // let myColor = { background: 'green', text: "white" };
//       //notify.show("Recored saved !", "custom", 5000, myColor);

//         }








// static propTypes={
//     history:React.PropTypes.object
// }




//     render() {


//         const {handleSubmit, pristine, reset,submitting} = this.props;
//         return (
//             <div>
//                 <div>
//                     <NavLink to="/Home" className='btn btn-danger pull-right'>Back to Home</NavLink>


//                 </div>


//                 <form className="form-horizontal animation2 jumbotron" onSubmit={handleSubmit((v) => this.onSubmit(v))}>
//                     <center><h2>Add Details</h2></center>

//                     <div className="form-group">
//                         <label className="col-md-4 col-sm-4 control-label">Name</label>
//                         <div className="col-md-4 col-sm-4">
//                             <Field component={renderField} name="Name"
//                                 type="text" className="form-control input-md" />
//                         </div>
//                     </div>


//                     <div className="form-group">
//                         <label className="col-md-4 col-sm-4 control-label">Age</label>
//                         <div className="col-md-4 col-sm-4">
//                             <Field component={renderField} name="Age"
//                                 type="text" placeholder="" className="form-control input-md" />
//                         </div>
//                      </div>





// <div className="form-group">
//     <label className="col-md-4 col-sm-4 control-label">State</label>
//     <div className="col-md-4 col-sm-4">
//         <Field  component={renderDropdownList}   name="State" type="text" data={States}   valueField="value" onChange={this.onchange}   textField="State" />

//     </div>
//                     </div>

//                     <div className="form-group">
//                         <label className="col-md-4 col-sm-4 control-label">City</label>
//                         <div className="col-md-4 col-sm-4">
//          <Field  component={renderDropdownList} name="City" type="text" data={this.state.val}   valueField="value"    textField="value" />

//                         </div>
//                     </div>




//                             {/*  <Notifications />*/}




//                     <button type="submit" className='btn btn-primary'>Submit</button> &nbsp;


//             <button type="button" className='btn btn-success' disabled={pristine || submitting} onClick={reset}>Clear Values
//         </button>
//                 </form>

//             </div>
//         );
//     }
// }



// const CreateMyForm = reduxForm({ form: "Postformnew", validate }, null, { createPost })(CreateNew);

// export default connect(null, { createPost,GetMethod })(CreateMyForm);






