constructor(props) {
        super(props);
        this.state = { opt: [], count: ["India", "USA"] };
        this.cascading = this.cascading.bind(this);
        
    }



cascading(event) {
        
        var x=null;
         if(!event){
             x=this.props.data.State;
      
         }else{
                x=event.target.value ;
         }

        const options=[];
        const State = [{ 'India': ["Uttarakhand", "UttarPradesh", "Maharastra"] }, { 'USA': ["Newyork", "Ohio"] }];
        State.map((item) => {
            Object.keys(item).map(key => {
                if (x=== key) {
                    let i = item[key].length - 1;
                    for (var s = 0; s <= i; s++) {
                        options.push(<option key={item[key][s]} value={item[key][s]}>{item[key][s]}</option>);

                    }
                }
            });
        });
        this.setState({ opt:options });

    }
---
--
--


<div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Email</label>
                        <div className="col-md-4 col-sm-4">
                            <Field name="State" component="select" type="select"
                                className="form-control" onChange={this.cascading} >
                                <option value="">Please Select</option>
                                {this.state.count.map((val, key) => {
                                    return <option key={key} value={val}>{val}</option>
                                })}
                            </Field>


                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">College</label>
                        <div className="col-md-4 col-sm-4">
                            <Field name="City" component="select" type="select" className="form-control">


                                <option value="" >Choose City</option>
                                {this.state.opt}
                            </Field>




                        </div>
                    </div>

//----------------------------------------------
FULL EDIT PAGE CODE HERE


import React, { Component } from 'react';
import { connect } from 'react-redux';
import { Field, reduxForm } from 'redux-form';
import { GetPost, Update } from '../actions/index';
//import Notifications, {notify} from 'react-notify-toast';

import GetMethod from '../actions/index';

class Edit extends Component {

    constructor(props) {
        super(props);
        this.state = { opt: [], count: ["India", "USA"] };
        this.cascading = this.cascading.bind(this);

    }


    cascading(event) {

        var x = null;
        if (!event) {
            x = this.props.data.State;

        } else {
            x = event.target.value;
        }

        const options = [];
        const State = [{ 'India': ["Uttarakhand", "UttarPradesh", "Maharastra"] }, { 'USA': ["Newyork", "Ohio"] }];
        State.map((item) => {
            Object.keys(item).map(key => {
                if (x === key) {
                    let i = item[key].length - 1;
                    for (var s = 0; s <= i; s++) {
                        options.push(<option key={item[key][s]} value={item[key][s]}>{item[key][s]}</option>);

                    }
                }
            });
        });
        this.setState({ opt: options });

    }




    static propTypes = {
        history: React.PropTypes.object
    }




    Initial() {
        // console.log("timer");
        const initdata = {
            ID: this.props.data.ID,
            Name: this.props.data.Name,
            Age: this.props.data.Age,
            State: this.props.data.State,
            City: this.props.data.City
        }
        this.props.initialize(initdata);
    }





    componentWillMount() {
        //alert(this.props.match.params.ID);
        const id = this.props.match.params.ID;
        this.props.GetPost(id).then((request) => {
            this.Initial();
            Window.onload = this.cascading();
        });

    }

    Up(value) {
        this.props.Update(value).then((request) => { this.props.GetMethod(); });
        this.props.history.push(`/GetCustomer`);
        // notify.show("deleted succesfully", "warning", 5000);


    }

    render() {
        //console.log("sss",this.props.data);
        if (!this.props.data) {
            return <h1>Loading</h1>;
        }

        const {handleSubmit} = this.props;
        return (
            <div>

                <form className="form-horizontal animation2 jumbotron" onSubmit={handleSubmit((value) => this.Up(value))}>
                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Name</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Name"
                                type="text" className="form-control input-md" />
                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Age</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Age"
                                type="text" className="form-control input-md" />

                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Email</label>
                        <div className="col-md-4 col-sm-4">
                            <Field name="State" component="select" type="select"
                                className="form-control" onChange={this.cascading} >
                                <option value="">Please Select</option>
                                {this.state.count.map((val, key) => {
                                    return <option key={key} value={val}>{val}</option>
                                })}
                            </Field>


                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">College</label>
                        <div className="col-md-4 col-sm-4">
                            <Field name="City" component="select" type="select" className="form-control">


                                <option value="" >Choose City</option>
                                {this.state.opt}
                            </Field>




                        </div>
                    </div>




                    <div className="form-group">

                        <div className="col-md-4 col-sm-4 col-md-offset-4 col-sm-offset-4">
                            <input type="submit" value="Submit" className="btn btn-primary" />
                        </div>
                    </div>

                </form>
            </div>
        );

    }
}

const red = reduxForm({
    form: "editform"
})(Edit);

function mapStateToProps(state) {
    //  console.log("123445676",state.getdata.getone)
    return { data: state.getdata.getone };

}

export default connect(mapStateToProps, { GetPost, GetMethod, Update })(red);