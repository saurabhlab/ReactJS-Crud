actions/index.js==>>




//edit code

export function Update(props){
 
    console.log(props);
const request =axios.put(`${ROOT_URL}`,props);
  
    return{
        type:"UPDATE",
        payload:request
    }
}



export function GetPost(id){
    const request =axios.get(`${ROOT_URL}/${id}`);
    console.log(request);

    return{
        type:"GETPOST",
        payload:request
    }
}

//-------------------



reducer/reducer_get.js==>>

import {GET_DATA, GET_ONE_DATA} from '../actions/index';
//import GetMethod from '../actions/index';


const INITIAL_STATE={all:[], getone:null};

export default function GetCustomer(state=INITIAL_STATE, action){

// if(!action.payload){
//         console.log("reducer1",action.payload);

// }

 //console.log("reducer1".green);
  //  console.log("reducer2",action.payload.data);
switch(action.type){
case GET_ONE_DATA:

return {INITIAL_STATE, getone:action.payload.data};


case GET_DATA:
//console.log("reducerget",action.payload);
 return {INITIAL_STATE, all:action.payload.data};

 case "GETPOST":
 return {INITIAL_STATE, getone:action.payload.data};

default: return state;
}
}

//-------------------


Container/editcustomer.js==>>

import React,{Component,PropTypes} from 'react';
import {connect} from 'react-redux';
import {Field,reduxForm} from 'redux-form';
import {GetPost,Update} from '../actions/index';




class Edit extends Component{

static propTypes={
    history:React.PropTypes.object
}




Initial(){
   // console.log("timer");
        const initdata={
            ID:this.props.data.ID,
            Name:this.props.data.Name,
            Age:this.props.data.Age,
            Email:this.props.data.Email,
            College:this.props.data.College,
            Address:this.props.data.Address
         }
        this.props.initialize(initdata);
    }


componentWillMount(){
    //alert(this.props.match.params.ID);
    const id=this.props.match.params.ID;
    this.props.GetPost(id).then((request)=>{
        this.Initial();
    });
 
}

Up(value){
    Update(value);
    this.props.history.push(`/`);
}

render(){   
    console.log("sss",this.props.data);
                if(!this.props.data){
                    return <h1>Loading</h1>;
                }
                
    const {handleSubmit}=this.props;
    return(
            
         <form className="form-horizontal" onSubmit={handleSubmit((value)=>this.Up(value))}>
                    <div className="form-group">
                    <Field component="input" name="ID"
                             type="hidden"  className="form-control input-md" />
                        <label className="col-md-4 col-sm-4 control-label">Name</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Name"
                             type="text"  className="form-control input-md" />
                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Age</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Age"
                             type="text"  className="form-control input-md" />

                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Email</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Email"
                            type="text" placeholder="" className="form-control input-md" />
                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">College</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="College"
                             type="text" placeholder="" className="form-control input-md" />

                        </div>
                    </div>

                    <div className="form-group">
                        <label className="col-md-4 col-sm-4 control-label">Address</label>
                        <div className="col-md-4 col-sm-4">
                            <Field component="input" name="Address"
                             type="text" placeholder="" className="form-control input-md" />

                        </div>
                    </div>


                    <div className="form-group">

                        <div className="col-md-4 col-sm-4 col-md-offset-4 col-sm-offset-4">
                            <input type="submit" value="Submit" className="btn btn-primary" />
                        </div>
                    </div>

            </form>
    );

}}

const red= reduxForm({
    form:"editform"
})(Edit);

function mapStateToProps(state){
  //  console.log("123445676",state.getdata.getone)
    return {data:state.getdata.getone};
    
}

export default connect(mapStateToProps,{GetPost,Update})(red);

//--------------------------



Container/Get_Customer.js==>>

import React,{Component} from 'react';
import {connect} from 'react-redux';
import {bindActionCreators} from 'redux';
import GetMethod from '../actions/index';
//import rootReducer from '../reducer';
import {selectCustomer}  from '../actions/index';

import {Deleted} from '../actions/index';



import {NavLink} from 'react-router-dom'

class GetIndex extends Component{
    componentWillMount(){
        this.props.GetMethod();
//this.props.selectCustomer();

    }
//-----this code use for edit in All Customer Get....

Edit(ID){
    this.props.history.push(`/Edit/${ID}`);
}






renderCustomer(){
               
    if (!this.props.bb)
     {
        return (
            <div><h3>Loading..</h3></div>
        );
     }

        return(
            <div > 
          <NavLink replace to={{ pathname: '/CreateMyForm' }} className="btn btn-success"> Create</NavLink>

            <table className="table table-border table-striped " style={{ "border": "2px solid gray","marginright":"80px" ,"padding":"10px"}}>

                    <thead>
                        <tr >

                            <th>ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Age</th>
                            <th>Address</th>
                            <th>College</th>
                            <th>Option</th>

                        </tr>
                    </thead>


                    <tbody>
                        {this.props.bb.map((item, key) => {
                            return ( <tr key={key}>
                                    <td> {item.ID}</td>
                                    <td> {item.Name}</td>
                                    <td> {item.Email}</td>
                                    <td> {item.Age}</td>
                                    <td> {item.Address}</td>
                                    <td> {item.College}</td>
                                    <td> <button className="btn btn-danger" onClick={()=>this.props.Deleted(item.ID)}>DELETE </button>-   
                                   <NavLink to={{ pathname: "/CustomerDetail/"+item.ID}} className="btn btn-success" onClick={()=> this.props.selectCustomer(item)}> Detail</NavLink>
                             {/*<NavLink to={{ pathname: "/Edit/"+item.ID}} className="btn btn-success"> Edit</NavLink>*/}
                                                       <a className="btn btn-primary" onClick={()=>this.Edit(item.ID)}>EDIT</a>

                                    
                                    </td>
                                </tr>)
                            
                        })}

                    </tbody>
                </table>
            
            
            </div>
        )}

    render(){
        return(
           <div>
                {this.renderCustomer()}
           </div>
        );
    }
}



function mapStateToProps(state){
    console.log("container state",state.getdata.all);
    return{
    bb:state.getdata.all
    };
}


 function mapdispatchtoprops(dispatch) {

     return bindActionCreators({GetMethod:GetMethod, Deleted:Deleted, selectCustomer:selectCustomer }, dispatch);
 }



export default connect(mapStateToProps,mapdispatchtoprops)(GetIndex);






//---------------

Components/App.js==>>


-- 
--
--
import Edit from '../Container/editcustomer';

--
--
--
<Route path="/Edit/:ID?" component={Edit}/>
--
--
//---------------









