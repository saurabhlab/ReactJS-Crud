actions/index.js==>>

export function currentpage(page)
{
    return{
        type:"currentpage",
        payload:page
    }
}

//--------

reducer/reducer_get.js==>>

case  "currentpage":
return{...state, page:action.payload};

//----------

container/Get-Customer.js==>>

import { getcount,currentpage } from '../actions/index';
--
--
  componentWillMount() {

        this.props.getcount().then(() => {

//------------current page code-------------
if(this.props.page==null)
    this.props.currentpage(this.state.currentPage);
else 
    this.props.currentpage(this.props.page);
//-------------
        });
    }
    handleClick(event) {

        this.setState({ currentPage: event.target.id })
        this.props.currentpage(Number(event.target.id));
        this.props.GetMethod(event.target.id)



    }

--
--
--

  <ul id="page-numbers" className="pagination">
                    <li onClick={() => {
                        this.setState({ currentPage: this.props.page });
                        this.props.currentpage((this.props.page - 1))
                        this.props.GetMethod(this.props.page - 1);
                    }
                    } >
                        <a className={(this.props.page <= 1) ? " btn disabled glyphicon  glyphicon-fast-backward" : " btn glyphicon glyphicon-fast-backward"}>
                        </a>
                    </li>

                    {renderPageNumbers}


                    <li onClick={() => {
                        this.setState({ currentPage: this.props.page });
                        this.props.currentpage((this.props.page + 1))
                        this.props.GetMethod(this.props.page + 1);
                    }
                    } >
                        <a className={(this.props.page >= lastpage) ? " btn disabled glyphicon glyphicon-fast-forward" : "btn glyphicon  glyphicon-fast-forward"}>
                        </a>
                    </li>
                </ul>

--
--
function mapStateToProps(state) {
   
    return {
   
        page: state.getdata.page
    };
}




function mapdispatchtoprops(dispatch) {

    return bindActionCreators({ GetMethod: GetMethod, Deleted: Deleted, GetPost1: GetPost1, getcount: getcount, currentpage: currentpage }, dispatch);
}




//--------------------



Container/editcustomer.js==>>

 Up(value) {
       // alert(this.props.page);
        this.props.Update(value).then((request) => { this.props.GetMethod(this.props.page);
           
         });
        this.props.history.push(`/GetCustomer`);
        


    }
--
--

function mapStateToProps(state) {
      console.log("123445676",state)
    return { data: state.getdata.getone ,
           page: state.getdata.page
        };

}



//-----------------------------------


delete button-->>

onClick={() => this.props.Deleted(item.ID).then((request) => {

                                        this.props.GetMethod(this.props.page);



                                    })}>
                                        DELETE
                                     </button>








