www.auth0.com

sign up-->>

npm install --save

auth0-js 
react-bootstrap
jwt-decode

redux-mediaquery
-->>
copy and paste client id and domain name from 
https://manage.auth0.com/#/clients/



Allowed Callback URLs --http://localhost:3000/GetCustomer
http://localhost:3000/Login


Allowed Origins (CORS) --http://localhost:3000/*
//-------------

Container/login.js==>>


import React, { PropTypes as T } from 'react'
import ReactDOM from 'react-dom'
import {Form, FormGroup, FormControl, ControlLabel, Button, ButtonToolbar} from 'react-bootstrap'
import AuthService from '../utils/AuthService'
import styles from './styles.module.css'

export class Login extends React.Component {
  static contextTypes = {
    router: T.object
  }

  static propTypes = {
    location: T.object,
    auth: T.instanceOf(AuthService)
  }

  getAuthParams() {
    return {
      email: ReactDOM.findDOMNode(this.refs.email).value,
      password: ReactDOM.findDOMNode(this.refs.password).value
    }
  }

  login(e) {
    e.preventDefault()
    const { email, password } = this.getAuthParams()
    this.props.auth.login(email, password)
  }

  signup() {
    const { email, password } = this.getAuthParams()
    this.props.auth.signup(email, password)
  }

  loginWithGoogle() {
    this.props.auth.loginWithGoogle();
  }

  render() {
    return (
      <div className={styles.root}>
        <h2>Login</h2>
        <Form onSubmit={this.login.bind(this)}>
          <FormGroup controlId="email">
            <ControlLabel>Email</ControlLabel>
            <FormControl type="email" ref="email" placeholder="yours@example.com" required />
          </FormGroup>

          <FormGroup controlId="password">
            <ControlLabel>Password</ControlLabel>
            <FormControl type="password" ref="password" placeholder="Password" required />
          </FormGroup>

          <ButtonToolbar>
            <Button type="submit" bsStyle="primary">Log In</Button>
            <Button onClick={this.signup.bind(this)}>Sign Up</Button>
            <Button bsStyle="link" onClick={this.loginWithGoogle.bind(this)}>
              Login with Google
            </Button>
          </ButtonToolbar>
        </Form>
      </div>
    )
  }
}

export default Login;

//-------------------------------------------

Container/style.module.css==>>

.root{
 
 width: 360px;
  
margin: 0 auto;
 
 background: #fff;

  padding: 20px;
}


//--------------------------------

src/utils.AuthService.js==>>


import { EventEmitter } from 'events';
import { isTokenExpired } from './jwtHelper';
//import { browserHistory } from 'react-router'


import auth0 from 'auth0-js'

export default class AuthService extends EventEmitter {
  constructor(clientId, domain) {
    super()
    // Configure Auth0
    this.auth0 = new auth0.WebAuth({
      clientID: 'YOUR_CLIENT_ID',
      domain: 'YOUR_AUTH0_DOMAIN',
      responseType: 'token id_token',
      redirectUri: 'http://localhost:3000/login'
    })

    this.login = this.login.bind(this)
    this.signup = this.signup.bind(this)
    this.loginWithGoogle = this.loginWithGoogle.bind(this)
  }

  login(username, password) {
    this.auth0.redirect.loginWithCredentials({
      connection: 'Username-Password-Authentication',
      username,
      password
    }, err => {
      if (err) return alert(err.description)
    })
  }

  signup(email, password){
    this.auth0.redirect.signupAndLogin({
      connection: 'Username-Password-Authentication',
      email,
      password,
    }, function(err) {
      if (err) {
        alert('Error: ' + err.description)
      }
    })
  }

  loginWithGoogle() {
    this.auth0.authorize({
      connection: 'google-oauth2'
    })
  }

  parseHash(hash) {
    this.auth0.parseHash({ hash, _idTokenVerification: false }, (err, authResult) => {
      if (err) {
        alert(`Error: ${err.errorDescription}`)
      }
      if (authResult && authResult.accessToken && authResult.idToken) {
        this.setToken(authResult.accessToken, authResult.idToken)
        this.auth0.client.userInfo(authResult.accessToken, (error, profile) => {
          if (error) {
            console.log('Error loading the Profile', error)
          } else {
            this.setProfile(profile)
           // browserHistory.replace('/home')
          }
        })
      }
    })
  }

  loggedIn() {
    // Checks if there is a saved token and it's still valid
    const token = this.getToken()
    return !!token && !isTokenExpired(token)
  }

  setToken(accessToken, idToken) {
    // Saves user access token and ID token into local storage
    localStorage.setItem('access_token', accessToken)
    localStorage.setItem('id_token', idToken)
  }

  setProfile(profile) {
    // Saves profile data to localStorage
    localStorage.setItem('profile', JSON.stringify(profile))
    // Triggers profile_updated event to update the UI
    this.emit('profile_updated', profile)
  }

  getProfile() {
    // Retrieves the profile data from localStorage
    const profile = localStorage.getItem('profile')
    return profile ? JSON.parse(localStorage.profile) : {}
  }

  getToken() {
    // Retrieves the user token from localStorage
    return localStorage.getItem('id_token')
  }

  logout() {
    // Clear user token and profile data from localStorage
    localStorage.removeItem('id_token')
    localStorage.removeItem('profile')
  }
}
//-----------------


src/utils.jwtHelper.js==>>


import decode from 'jwt-decode';

export function getTokenExpirationDate(token){
  const decoded = decode(token)
  if(!decoded.exp) {
    return null
  }

  const date = new Date(0) // The 0 here is the key, which sets the date to the epoch
  date.setUTCSeconds(decoded.exp)
  return date
}

export function isTokenExpired(token){
  const date = getTokenExpirationDate(token)
  if (date === null) {
    return false
  }
  return !(date.valueOf() > new Date().valueOf())
}

//--------------------

src/routes.js=>>
import Login from './Container/login';
import AuthService from './utils/AuthService';
--
--



const auth = new AuthService('pFG42lJpsqHf1xLIBbLKBFp92yaMumpI', 'saurabhwanjari.auth0.com');



const parseAuthHash = (nextState, replace) => {
    console.log(nextState,replace)
  if (/access_token|id_token|error/.test(nextState.location.hash)) {
    auth.parseHash(nextState.location.hash)
  }
}


const Name=function(){
    return <Login auth={auth} onEnter={parseAuthHash}/>
}

--
--
--
<Router>
 <Route path="/Login" component={Name} />


<Router>
//-------------------

src/styles/base.js==>>
:root {
  --topbar-height: 80px;
  --padding: 25px;
}

//-----------------

src/styles/colors.js==>>

:root {
 
 --dark: #404040;
 
 --light-gray: #a2a2a2;
 
 --white: #ffffff;
  
--highlight: #48b5e9;
 
 --heading-color: var(--highlight);

}


//------------------


src/styles/queries.js==>>

import { mediatracker } from 'redux-mediaquery';



@custom-media --screen-phone (width <= 35.5em);

@custom-media --screen-phone-lg (width > 35.5em);


@custom-media --screen-sm var(--screen-phone) and (width < 48em);

@custom-media --screen-md (width >= 48em) and (width < 64em);

@custom-media --screen-lg (width >= 64em) and (width < 80em);

@custom-media --screen-xl (width >= 80em);


///-----------------------------

























